var documenterSearchIndex = {"docs":
[{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"EditURL = \"../../../lit/examples/08-bdd2d.jl\"","category":"page"},{"location":"generated/examples/08-bdd2d/#08-bdd2d","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"","category":"section"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"This page describes the 2D branchless distance-driven projection and backprojection method of Basu & De Man, 2006 for fan-beam geometries with a \"flat\" detector using the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"This page compares the results to the radon transform method.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"This page comes from a single Julia file: 08-bdd2d.jl.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 08-bdd2d.ipynb, or open it in binder here: 08-bdd2d.ipynb.","category":"page"},{"location":"generated/examples/08-bdd2d/#Setup","page":"2D Branchless Distance-driven Projection and Backprojection","title":"Setup","text":"","category":"section"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Packages needed here.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"using ImageGeoms: ImageGeom, fovs, MaskCircle\nimport ImageGeoms # downsample\nusing ImagePhantoms: shepp_logan, SheppLoganToft, radon, phantom\nusing MIRTjim: jim, prompt\nimport Plots\nusing Sinograms: project_bdd, backproject_bdd\nimport Sinograms # downsample, _ar, _dso\nusing Sinograms: SinoFanFlat, rays, plan_fbp, fbp, Window, Hamming, sino_geom_plot!, angles\nusing Unitful: mm","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/08-bdd2d/#Fan-beam-sinogram-of-SheppLoganToft-phantom","page":"2D Branchless Distance-driven Projection and Backprojection","title":"Fan-beam sinogram of SheppLoganToft phantom","text":"","category":"section"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"For illustration, we start by synthesizing a fan-beam sinogram of the SheppLoganToft phantom.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Define the sinogram geometry","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"down = 4 # save time\nrg = SinoFanFlat( ; nb = 910, d = 1.0239mm, na = 360, dsd = 949mm, dod = 408mm)\nrg = Sinograms.downsample(rg, down)","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Define the image geometry","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"ig = ImageGeom(MaskCircle(); dims=(512,512), deltas = (1mm,1mm))\nig = ImageGeoms.downsample(ig, down)","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Make a tuple to define imaging geometry for bdd code. todo","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"geo = (DSD = rg.dsd, DS0 = Sinograms._dso(rg), pSize = ig.deltas[1],\n    dSize = rg.d, nPix = ig.dims[1], nDet = rg.nb, angle = Sinograms._ar(rg))","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Examine the geometry to verify the FOV:","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"pa = jim(axes(ig), ig.mask; prompt=false)\nsino_geom_plot!(rg, ig)","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"prompt()","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Ellipse parameters for SheppLoganToft phantom:","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"μ = 0.01 / mm # typical linear attenuation coefficient\nob = shepp_logan(SheppLoganToft(); fovs = fovs(ig), u = (1, 1, μ))\ntestimage = phantom(axes(ig)..., ob) # Create a phantom image\npt = jim(axes(ig), testimage) # Show the true phantom image","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Fan-beam sinograms for phantom:","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"if !@isdefined(sinogramR)\n    @time sinogramR = radon(rays(rg), ob)\n    # Ensure that sinogram is not truncated\n    @assert all(==(0), sum(abs, sinogramR, dims=2)[[1,end]])\nend;\n\nif !@isdefined(sinogramB)\n    @time sinogramB = project_bdd(reverse(rot180(testimage'), dims=2), geo)\n    sinogramB = sinogramB' # todo\nend;\n\np1 = jim(axes(rg), sinogramB; prompt=false,\n title=\"bdd_2d sinogram\", xlabel=\"r\", ylabel=\"ϕ\")\np2 = jim(axes(rg), sinogramR; prompt=false,\n title=\"Radon test sinogram\", xlabel=\"r\", ylabel=\"ϕ\")\np12 = jim(p1,p2)","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Difference of sinogram using bdd_2d versus radon method.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"pd = jim(axes(rg), sinogramR - sinogramB;\n title=\"Difference sinogram\", xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/08-bdd2d/#Backprojection-with-bdd_2d","page":"2D Branchless Distance-driven Projection and Backprojection","title":"Backprojection with bdd_2d","text":"","category":"section"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"(The un-filtered back-projected image is not a useful reconstruction. See next section for image reconstruction via FBP.)","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"if !@isdefined(imageB)\n    @time imageB = backproject_bdd(sinogramB'/1mm, geo) # todo\n    imageB = rotr90(imageB) # todo\nend\npb = jim(axes(ig), imageB;\n title=\"bdd_2d backprojection\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"generated/examples/08-bdd2d/#Image-reconstruction-via-FBP","page":"2D Branchless Distance-driven Projection and Backprojection","title":"Image reconstruction via FBP","text":"","category":"section"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Compare the reconstructed image using the bdd_2d sinogram and the radon sinogram.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"Here we start with a \"plan\" that would save work if we were reconstructing many images. For illustration we include Hamming window.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"plan = plan_fbp(rg, ig; window = Window(Hamming(), 1.0))\nfbp_image_b = fbp(plan, sinogramB)\nfbp_image_r = fbp(plan, sinogramR);\nnothing #hide","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"A narrow color window is needed to see the soft tissue structures:","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"clim = (0.04, 1.1) .* μ\nr1 = jim(axes(ig), fbp_image_b, \"FBP image with bdd_2d\"; clim)\nr2 = jim(axes(ig), fbp_image_r, \"FBP image with radon\"; clim)\nr12 = jim(r1,r2; size=(1000,300))","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"For comparison, here is the difference image.","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"pe = jim(axes(ig), fbp_image_b - fbp_image_r, \"Difference image\")","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"","category":"page"},{"location":"generated/examples/08-bdd2d/","page":"2D Branchless Distance-driven Projection and Backprojection","title":"2D Branchless Distance-driven Projection and Backprojection","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"EditURL = \"../../../lit/examples/07-fdk.jl\"","category":"page"},{"location":"generated/examples/07-fdk/#07-fdk","page":"CBCT FDK","title":"CBCT FDK","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"This page describes image reconstruction for cone-beam computed tomography (CBCT) with both arc and flat detectors using the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"This page comes from a single Julia file: 07-fdk.jl.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 07-fdk.ipynb, or open it in binder here: 07-fdk.ipynb.","category":"page"},{"location":"generated/examples/07-fdk/#Setup","page":"CBCT FDK","title":"Setup","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Packages needed here.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"using Plots: plot, gui\nusing Unitful: cm\nusing Sinograms: CtFanArc, CtFanFlat # CtPar\nusing Sinograms: rays, plan_fbp, Window, Hamming, fdk, ct_geom_plot3\nusing ImageGeoms: ImageGeom, MaskCircle, fovs\nusing ImagePhantoms: ellipsoid_parameters, ellipsoid\nusing ImagePhantoms: radon, phantom\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/07-fdk/#CBCT-projections-of-3D-Shepp-Logan-phantom","page":"CBCT FDK","title":"CBCT projections of 3D Shepp-Logan phantom","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"For illustration, we start by synthesizing CBCT projections of the 3D Shepp-Logan phantom.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Use ImageGeom to define the image geometry.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"ig = ImageGeom(MaskCircle(); dims=(64,62,30), deltas = (1,1,2) .* 0.4cm)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Ellipsoid parameters for 3D Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"μ = 0.1 / cm # typical linear attenuation coefficient\nparams = ellipsoid_parameters( ; fovs = fovs(ig), u = (1, 1, μ))\nob = ellipsoid(params)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"A narrow grayscale window is needed to see the soft tissue structures","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"clim = (0.95, 1.05) .* μ","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Here is the ideal phantom image:","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"oversample = 3\ntrue_image = phantom(axes(ig)..., ob, oversample)\npt = jim(axes(ig), true_image, \"True 3D Shepp-Logan phantom image\"; clim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Define the system geometry (for some explanation use ?CtGeom):","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"p = (ns = 130, ds = 0.3cm, nt = 80, dt = 0.4cm, na = 50, dsd = 200cm, dod = 40cm)\nrg = CtFanArc( ; p...)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"Examine the geometry to verify the FOV (this is more interesting when interacting via other Plot backends):","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"ct_geom_plot3(rg, ig)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"prompt()","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"CBCT projections using Sinogram.rays and ImagePhantoms.radon:","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"proj_arc = radon(rays(rg), ob)\npa = jim(axes(rg)[1:2], proj_arc ;\n    title=\"Shepp-Logan projections (arc)\", xlabel=\"s\", ylabel=\"t\")","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"There is no \"inverse crime\" here because we compute the projection views using the analytical phantom geometry, but then reconstruct on a discrete grid.","category":"page"},{"location":"generated/examples/07-fdk/#Image-reconstruction-via-FBP-/-FDK","page":"CBCT FDK","title":"Image reconstruction via FBP / FDK","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"We start with a \"plan\", which would save work if we were reconstructing many images. For illustration we include Hamming window.","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"plan = plan_fbp(rg, ig; window = Window(Hamming(), 1.0))\nfdk_arc = fdk(plan, proj_arc)\npar = jim(axes(ig), fdk_arc, \"FDK image (arc)\"; clim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"err_arc = fdk_arc - true_image\nelim = (-1,1) .* (0.02μ)\npae = jim(axes(ig), err_arc, \"Error image (arc)\"; clim = elim)","category":"page"},{"location":"generated/examples/07-fdk/#Repeat-with-flat-detector-geometry","page":"CBCT FDK","title":"Repeat with flat detector geometry","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"rg = CtFanFlat( ; p...)\nproj_flat = radon(rays(rg), ob)\npfp = jim(axes(rg)[1:2], proj_flat ;\n    title=\"Shepp-Logan projections (flat)\", xlabel=\"s\", ylabel=\"t\")\n\nplan = plan_fbp(rg, ig; window = Window(Hamming(), 1.0))\nfdk_flat = fdk(plan, proj_flat)\npfr = jim(axes(ig), fdk_flat, \"FDK image (flat)\"; clim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"err_flat = fdk_flat - true_image\npfe = jim(axes(ig), err_flat, \"Error image (flat)\"; clim = elim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"As expected for CBCT, the largest errors are in the end slices.","category":"page"},{"location":"generated/examples/07-fdk/#Short-scan","page":"CBCT FDK","title":"Short scan","text":"","category":"section"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"rg = CtFanFlat(:short ; p..., na = 200)\nproj_short = radon(rays(rg), ob)\npsp = jim(axes(rg)[1:2], proj_short ;\n    title=\"Shepp-Logan projections (flat,short)\", xlabel=\"s\", ylabel=\"t\")","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"plan_short = plan_fbp(rg, ig; window = Window(Hamming(), 1.0))\npsw = jim(axes(rg)[[1,3]], plan_short.view_weight[:,1,:];\n    title = \"View weights (including Parker)\",\n    xlabel=\"s\", ylabel=\"angle\")","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"fdk_short = fdk(plan_short, proj_short)\npsr = jim(axes(ig), fdk_short, \"FDK image (flat,short)\"; clim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"err_short = fdk_short - true_image\npse = jim(axes(ig), err_flat, \"Error image (flat,short)\"; clim = elim)","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"","category":"page"},{"location":"generated/examples/07-fdk/","page":"CBCT FDK","title":"CBCT FDK","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"EditURL = \"../../../lit/examples/02-sino-geom.jl\"","category":"page"},{"location":"generated/examples/02-sino-geom/#02-sino-geom","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This page describes the 2D sinogram geometries available in the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This page comes from a single Julia file: 02-sino-geom.jl.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 02-sino-geom.ipynb, or open it in binder here: 02-sino-geom.ipynb.","category":"page"},{"location":"generated/examples/02-sino-geom/#Setup","page":"2D sinogram geometry","title":"Setup","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Packages needed here.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"using Unitful: mm, °\nusing Plots # these 2 must precede 'using Sinograms' for sino_plot_rays to work\nusing Sinograms: SinoPar, SinoMoj, SinoFanArc, SinoFanFlat, SinoFan\nusing Sinograms: sino_plot_rays, rays, angles\nusing MIRTjim: jim, prompt\nusing InteractiveUtils: versioninfo","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/02-sino-geom/#2D-Sinogram-geometries","page":"2D sinogram geometry","title":"2D Sinogram geometries","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"To perform 2D image reconstruction from a 2D sinogram, one must first describe how the rays in the sinogram are sampled.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Mathematically, the Radon transform p(rphi) of f(xy) is defined for all r and ϕ but practical systems record p(rϕ) only for certain finite sets of samples of those values.","category":"page"},{"location":"generated/examples/02-sino-geom/#Parallel-beam-geometry","page":"2D sinogram geometry","title":"Parallel-beam geometry","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"The simplest form of sinogram sampling is equally spaced samples in both r and ϕ. This sampling is called a parallel-beam geometry. (Very few practical systems have this sampling pattern, but it is an easy place to start.) Both FBP and iterative reconstruction methods need to know which values of r and ϕ are sampled.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"In this package, SinoPar is the type that describes a parallel-beam sinogram geometry.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"The built-in defaults provide helpful reminders about the usage.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"SinoPar()","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This package supports units via the Unitful.jl and using units is recommended (but not required).","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is an example of how to specify a parallel-beam geometry. Everything is a named keyword argument with sensible default values.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"orbit and orbit_start must both be unitless (degrees) or have the same units (e.g., degrees or radians).\ndetector spacing d (can be unitless or have units e.g., mm).\nThe projection angles ϕ are equally space and given by orbit_start + (0:(nb-1))/nb * orbit.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"rg = SinoPar( ;\n    nb = 64, # number of radial samples (\"bins\")\n    na = 30, # number of angular samples\n    d = 2mm, # detector spacing\n    offset = 0.25, # quarter detector offset (unitless)\n    orbit = 180, # angular range (in degrees)\n    orbit_start = 0, # starting angle (in degrees)\n)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"The struct rg has numerous useful properties; type ?SinoGeom to see the full list.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"For example, to access the angular samples in degrees type angles(rg)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"angles(rg)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"The following function visualizes the sampling pattern.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"sino_plot_rays(rg; ylims=(0,180), yticks=(0:90:180), widen=true, title=\"Parallel\")","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"prompt()","category":"page"},{"location":"generated/examples/02-sino-geom/#Fan-beam-CT-with-an-arc-detector-(3rd-generation-CT)","page":"2D sinogram geometry","title":"Fan-beam CT with an arc detector (3rd generation CT)","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"For a fan-beam geometry, the arguments are the same as for SinoPar with the addition of specifying:","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"dsd distance from source to detector\ndod distance from origin (isocenter) to detector\ndfs distance from focal point of detector to source (0 for a 3rd gen arc detector, and Inf for a flat detector)\nsource_offset for misaligned systems  where the ray from the source to the detector center  does not intersect the isocenter.  Not fully supported; submit an issue if you need this feature.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is an example that corresponds to a GE Lightspeed CT system. These numbers are published in IEEE T-MI Oct. 2006, p.1272-1283.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"rg = SinoFanArc( ; nb=888, na=984,\n    d=1.0239mm, offset=1.25, dsd=949.075mm, dod=408.075mm)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is a smaller example for plotting the rays.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"rg = SinoFanArc( ; nb=64, na=30,\n    d=20mm, offset=0.25, dsd=900mm, dod=400mm)\nsino_plot_rays(rg; ylims=(-50,400), yticks=(0:180:360), widen=true,\n    title=\"Fan-beam for arc detector\")","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"prompt()","category":"page"},{"location":"generated/examples/02-sino-geom/#Fan-beam-CT-with-a-flat-detector","page":"2D sinogram geometry","title":"Fan-beam CT with a flat detector","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This geometry is the same as the arc detector except that dfs=Inf.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"rg = SinoFanFlat( ; nb=64, na=30,\n    d=20mm, offset=0.25, dsd=900mm, dod=400mm)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is its sampling plot","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"sino_plot_rays(rg; ylims=(-50,400), yticks=(0:180:360), widen=true,\n    title=\"Fan-beam for flat detector\")","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"prompt()","category":"page"},{"location":"generated/examples/02-sino-geom/#Mojette-sampling","page":"2D sinogram geometry","title":"Mojette sampling","text":"","category":"section"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This is a specialized sampling geometry that is currently incompletely supported.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"rg = SinoMoj( ; nb=60, na=30)","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is its sampling plot","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"sino_plot_rays(rg; ylims=(0,180), yticks=(0:90:180), widen=true,\n    title=\"Mojette sampling\")","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"Here is a diagram that illustrates how the radial spacing is a function of the projection view angle for the Mojette geometry. The key aspect here is that in each image row the line intersection lengths are identical.","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"plot(xlims=(-1,1) .* 3.5, ylims = (-1,1) .* 2.5, xlabel=\"x\", ylabel=\"x\")\ndefault(label=\"\")\nfor y in -2:2\n    plot!([-3, 3], [y, y], color=:black)\nend\nfor x in -3:3\n    plot!([x, x], [-2, 2], color=:black)\nend\nplot_ray!(r, ϕ) = plot!(\n    r*cos(ϕ) .+ [-1, 1] * 4 * sin(ϕ),\n    r*sin(ϕ) .+ [1, -1] * 4 * cos(ϕ),\n    color = :blue,\n)\nia = 4 # pick an angle\ni = rays(rg) # iterator\nrs = [i[1] for i in i] # radial samples\nϕs = [i[2] for i in i] # projection angle\nr = rs[:,ia]\nr = r[abs.(r) .< 3]\nϕ = ϕs[1,ia]\nplot_ray!.(r, ϕ)\nplot!(aspect_ratio=1, title = \"Mojette line integrals\")","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"","category":"page"},{"location":"generated/examples/02-sino-geom/","page":"2D sinogram geometry","title":"2D sinogram geometry","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"EditURL = \"../../../lit/examples/03-parallel-beam.jl\"","category":"page"},{"location":"generated/examples/03-parallel-beam/#03-parallel-beam","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"","category":"section"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"This page describes parallel-beam tomographic image reconstruction using the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"This page comes from a single Julia file: 03-parallel-beam.jl.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 03-parallel-beam.ipynb, or open it in binder here: 03-parallel-beam.ipynb.","category":"page"},{"location":"generated/examples/03-parallel-beam/#Setup","page":"Parallel-beam tomography","title":"Setup","text":"","category":"section"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Packages needed here.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"using Sinograms: SinoPar, rays, plan_fbp, fbp, fbp_sino_filter\nusing ImageGeoms: ImageGeom, fovs, MaskCircle\nusing ImagePhantoms: SheppLogan, shepp_logan, radon, phantom\nusing Unitful: mm\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/03-parallel-beam/#Parallel-beam-sinogram-of-Shepp-Logan-phantom","page":"Parallel-beam tomography","title":"Parallel-beam sinogram of Shepp-Logan phantom","text":"","category":"section"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"For illustration, we start by synthesizing a parallel-beam sinogram of the Shepp-Logan phantom.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Use ImageGeom to define the image geometry.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"ig = ImageGeom(MaskCircle(); dims=(128,126), deltas = (2mm,2mm) )","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Use SinoPar to define the sinogram geometry.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"rg = SinoPar( ; nb = 130, d = 2mm, na = 100)","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Ellipse parameters for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"μ = 0.01 / mm # typical linear attenuation coefficient\nob = shepp_logan(SheppLogan(); fovs = fovs(ig), u = (1, 1, μ))","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Radon transform of Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"sino = radon(rays(rg), ob)\njim(axes(rg), sino; title=\"Shepp-Logan sinogram\", xlabel=\"r\", ylabel=\"ϕ\")\n\n# Image reconstruction via FBP","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"Here we start with a \"plan\", which would save work if we were reconstructing many images.","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"plan = plan_fbp(rg, ig)\nfbp_image = fbp(plan, sino)","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"A narrow color window is needed to see the soft tissue structures:","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"clim = (0.9, 1.1) .* μ\njim(axes(ig), fbp_image, \"FBP image\"; clim)","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"For comparison, here is the ideal phantom image","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"true_image = phantom(axes(ig)..., ob, 2)\njim(axes(ig)..., true_image, \"True phantom image\"; clim)","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"For fun, here is the filtered sinogram:","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"sino_filt = fbp_sino_filter(sino, plan.filter)\njim(axes(rg), sino_filt; title=\"Filtered sinogram\", xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"","category":"page"},{"location":"generated/examples/03-parallel-beam/","page":"Parallel-beam tomography","title":"Parallel-beam tomography","text":"This page was generated using Literate.jl.","category":"page"},{"location":"methods/#Methods-list","page":"Methods","title":"Methods list","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"","category":"page"},{"location":"methods/#Methods-usage","page":"Methods","title":"Methods usage","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [Sinograms]","category":"page"},{"location":"methods/#Sinograms.Sinograms","page":"Methods","title":"Sinograms.Sinograms","text":"Sinograms module\n\n\n\n\n\n","category":"module"},{"location":"methods/#Sinograms.CtFanArc","page":"Methods","title":"Sinograms.CtFanArc","text":"CtFanArc{Td,To,Ts}\n\n3D CBCT geometry for arc detector\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtFanArc-Tuple{Val{:ge1}}","page":"Methods","title":"Sinograms.CtFanArc","text":"CtFanArc(::Val{:ge1} ; kwargs...)\n\nGE Lightspeed system CT geometry.\n\noption\n\nunit::RealU = 1 or use 1mm\n(see CtFanArc)\n\nout\n\nCtFanArc\n\nThese numbers are published in IEEE T-MI Oct. 2006, p.1272-1283 wang:06:pwl.\n\njulia> CtFanArc(Val(:ge1))\nCtFanArc{Float64, Float32, CtSourceCircle} :\n ns::Int64 888\n nt::Int64 64\n ds::Float64 1.0239\n dt::Float64 1.0964\n offset_s::Float32 1.25\n offset_t::Float32 0.0\n na::Int64 984\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float64 0.0\n dsd::Float64 949.075\n dod::Float64 408.075\n src::CtSourceCircle CtSourceCircle()\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.CtFanArc-Tuple{}","page":"Methods","title":"Sinograms.CtFanArc","text":"CtFanArc( ; ns nt ds dt offset_s offset_t\n    na orbit orbit_start\n    dsd = 4ns * ds, dod = ns * ds)\nCtFanArc(:short ; ...)\n\nConstructor with named keywords. See ?CtGeom for documentation.\n\nUse :short argument to specify a short scan, in which case na will be scaled down proportionally as well.\n\njulia> CtFanArc()\nCtFanArc{Float32, Float32, CtSourceCircle} :\n ns::Int64 128\n nt::Int64 64\n ds::Float32 1.0\n dt::Float32 1.0\n offset_s::Float32 0.0\n offset_t::Float32 0.0\n na::Int64 64\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float32 0.0\n dsd::Float32 512.0\n dod::Float32 128.0\n src::CtSourceCircle CtSourceCircle()\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.CtFanFlat","page":"Methods","title":"Sinograms.CtFanFlat","text":"CtFanFlat{Td,To,Ts}\n\n3D CTCT geometry for flat detector\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtFanFlat-Tuple{}","page":"Methods","title":"Sinograms.CtFanFlat","text":"CtFanFlat( ; ns nt ds dt offset_s offset_t\n    na orbit orbit_start\n    dsd = 4ns * ds, dod = ns * ds)\nCtFanFlat(:short ; ...)\n\nConstructor with named keywords. See ?CtGeom for documentation.\n\nUse :short argument to specify a short scan, in which case na will be scaled down proportionally as well.\n\njulia> CtFanFlat()\nCtFanFlat{Float32, Float32, CtSourceCircle} :\n ns::Int64 128\n nt::Int64 64\n ds::Float32 1.0\n dt::Float32 1.0\n offset_s::Float32 0.0\n offset_t::Float32 0.0\n na::Int64 64\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float32 0.0\n dsd::Float32 512.0\n dod::Float32 128.0\n src::CtSourceCircle CtSourceCircle()\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.CtGeom","page":"Methods","title":"Sinograms.CtGeom","text":"CtGeom{Td,To,Ts}\n\nAbstract type for representing ray geometries for 3D CT imaging.\n\nThe projection view coordinates are (s,t) where s denotes the transaxial sampling and t denotes the axial direction (along z).\n\nCommon fields\n\nns size of each projection view\nnt\nds detector pixel spacing\ndt\noffset_s unitless detector center offset (usually 0 or 0.25)\noffset_t unitless, usually 0\nna # of projection views, aka nϕ or nβ\norbit source orbit in degrees (or Unitful)\norbit_start starting angle in degrees (or Unitful) orbit and orbit_start must both be unitless (degrees) or have same units.\nsrc::CtSource describes the X-ray CT source trajectory. Primary support for CtSourceCircle().\n\nAdditional fields for CtFan types:\n\ndsd distance from source to detector\ndod distance from origin to detector\nsource_offset usually 0\n\nUnits:\n\nds, dt, source_offset, dsd, dod must all be unitless or have the same units.\n\nBasic methods\n\nangles (na) in degrees\ndims (ns, nt, na)\nones = ones(Float32, ns,nt,na)\nzeros = zeros(Float32, ns,nt,na)\nrays iterator of (u,v,ϕ,θ) samples\ndownsample(st, down) reduce sampling by integer factor\noversample(st, over)\nct_geom_plot3 plot system geometry\n\nNon-exported helper functions for developers:\n\n_s (ns) s sample locations\n_t (nt) t sample locations\n_ws = (ns-1)/2 + offset_s \"middle\" sample position\n_wt = (nt-1)/2 + offset_t\n_ar (na) source angles [radians]\n_rfov max radius within FOV\n_zfov axial FOV\n_xds (nb) center of detector elements (beta=0)\n_yds (nb) \"\"\n_tau(rg, x, y) projected s/ds for each (x,y) pair (length(x), na)\n_shape(rg, proj [,:]) reshape proj into array (ns,nt,na[,:])\n_unitv(rg [, (is,it,ia)]) unit 'vector' with single nonzero element\n\nFor fan beam:\n\n_dso = dsd - dod distance from source to origin (Inf for parallel beam)\n_dfs distance from source to detector focal spot       (0 for 3rd gen CT, Inf for flat detectors)\n_gamma(rg [,s]) (ns) gamma sample values radians, optionally given s values\n_gamma_max = max(|γ|) half of fan angle radians, if offset_s == 0\n_cone_angle (half) cone angle on axis (s=0): +/- angle\n\nNotes\n\nUse sino_geom() instead for 2D geometries.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtPar","page":"Methods","title":"Sinograms.CtPar","text":"CtPar{Td,To,Ts}\n\n3D parallel-beam projection geometry\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtPar-Tuple{}","page":"Methods","title":"Sinograms.CtPar","text":"CtPar( ; ns nt ds dt offset_s offset_t na orbit orbit_start)\n\nConstructor with named keywords. See ?CtGeom for documentation.\n\njulia> CtPar()\nCtPar{Float32, Float32, CtSourceCircle} :\n ns::Int64 128\n nt::Int64 64\n ds::Float32 1.0\n dt::Float32 1.0\n offset_s::Float32 0.0\n offset_t::Float32 0.0\n na::Int64 60\n orbit::Float32 180.0\n orbit_start::Float32 0.0\n src::CtSourceCircle CtSourceCircle()\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.CtSource","page":"Methods","title":"Sinograms.CtSource","text":"CtSource\n\nAbstract type for representing X-ray CT source trajectories.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtSourceCircle","page":"Methods","title":"Sinograms.CtSourceCircle","text":"CtSourceCircle\n\nType for representing circular X-ray CT source trajectory.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtSourceHelix","page":"Methods","title":"Sinograms.CtSourceHelix","text":"CtSourceHelix\n\nType for representing helical X-ray CT source trajectories having constant pitch.\n\nFields\n\npitch helix pitch (unitless fraction of zFOV, default 0)\nsource_z0 initial z position of x-ray source (default 0) It should have same units as detector pixels etc.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.CtSourceHelix-Tuple{}","page":"Methods","title":"Sinograms.CtSourceHelix","text":"CtSourceHelix( ; pitch = 0, source_z0 = 0)\n\nConstructor with named keywords\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.FBPNormalPlan","page":"Methods","title":"Sinograms.FBPNormalPlan","text":"FBPNormalPlan{S,I,H,P}\n\nStruct type for storing \"normal\" FBP plan.\n\nThe view_weight can include (products of)\n\nParker weighting for short scans\nview-wise weighting from fbp_sino_weight todo\ndβ weighting for possibly nonuniform angles from _angle_weights\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.FBPplan","page":"Methods","title":"Sinograms.FBPplan","text":"FBPplan\n\nAbstract type for FBP plans.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.FDKplan","page":"Methods","title":"Sinograms.FDKplan","text":"FDKplan{C,I,H,V}\n\nStruct type for storing FDK plan.\n\nThe view_weight can include (products of)\n\nParker weighting for short scans\nview-wise CBCT weighting from fdk_weight_cyl\ndβ weighting for possibly nonuniform angles from _angle_weights\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.RayGeom","page":"Methods","title":"Sinograms.RayGeom","text":"RayGeom{Td,To}\n\nParent type for SinoGeom and CtGeom\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoFanArc","page":"Methods","title":"Sinograms.SinoFanArc","text":"SinoFanArc{Td,To}\n\n2D fan-beam sinogram geometry for arc detector\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoFanArc-Tuple{Val{:ge1}}","page":"Methods","title":"Sinograms.SinoFanArc","text":"SinoFanArc(Val(:ge1) ; kwargs...)\n\nGE Lightspeed system CT geometry.\n\noption\n\nunit::RealU = 1 or use 1mm\nnb::Int = 888 # of detector channels\nd::RealU = 1.0239 channel spacing\noffset::Real = 1.25 for \"quarter-detector\" offset\nna::Int = 984 # of angles\norbit::Union{Symbol,Real} = 360 use :short for short scan\ndsd::RealU = 949.075\ndod::RealU = 408.075\n\nout\n\nSinoFanArc\n\nThese numbers are published in IEEE T-MI Oct. 2006, p.1272-1283 wang:06:pwl.\n\njulia> SinoFanArc(Val(:ge1))\nSinoFanArc{Float32, Float32} :\n nb::Int64 888\n d::Float32 1.0239\n offset::Float32 1.25\n na::Int64 984\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float32 0.0\n dsd::Float32 949.075\n dod::Float32 408.075\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.SinoFanArc-Tuple{}","page":"Methods","title":"Sinograms.SinoFanArc","text":"SinoFanArc( ; nb d offset na orbit orbit_start\n    source_offset, dsd = 4 * nb * d, dod = nb * d)\nSinoFanArc(:short ; ...)\n\nConstructor with named keywords. See ?SinoGeom for documentation.\n\nd, source_offset, dsd, dod must all have the same units.\nUse :short argument to specify a short scan, in which case na will be scaled down proportionally as well.\n\njulia> SinoFanArc()\nSinoFanArc{Float32, Float32} :\n nb::Int64 128\n d::Float32 1.0\n offset::Float32 0.0\n na::Int64 200\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float32 0.0\n dsd::Float32 512.0\n dod::Float32 128.0\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.SinoFanFlat","page":"Methods","title":"Sinograms.SinoFanFlat","text":"SinoFanFlat{Td,To}\n\n2D fan-beam sinogram geometry for flat detector\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoFanFlat-Tuple{}","page":"Methods","title":"Sinograms.SinoFanFlat","text":"SinoFanFlat( ; nb d offset na orbit orbit_start\n    source_offset, dsd= 4 * nb * d, dod = nb * d)\nSinoFanFlat(:short ; ...)\n\nConstructor with named keywords. See ?SinoGeom for documentation.\n\nUse :short argument to specify a short scan, in which case na will be scaled down proportionally as well.\n\njulia> SinoFanFlat()\nSinoFanFlat{Float32, Float32} :\n nb::Int64 128\n d::Float32 1.0\n offset::Float32 0.0\n na::Int64 200\n orbit::Float32 360.0\n orbit_start::Float32 0.0\n source_offset::Float32 0.0\n dsd::Float32 512.0\n dod::Float32 128.0\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.SinoGeom","page":"Methods","title":"Sinograms.SinoGeom","text":"SinoGeom{Td,To}\n\nAbstract type for representing ray geometries for 2D sinograms. This describes the sampling characteristics of a given sinogram for a 2D parallel or fan-beam system.\n\nCommon fields\n\nnb # of \"radial\" samples, aka nr or ns\nd aka dr or ds, \"radial\" sample spacing\noffset unitless sample offset (usually 0 or 0.25)\nna # of angular samples, aka nϕ or nβ  default: 2 * floor(Int, nb * π/2 / 2)\norbit source orbit in degrees (or Unitful)\norbit_start starting angle in degrees (or Unitful) orbit and orbit_start must both be unitless (degrees) or have same units.\n\nAdditional fields for SinoFan types\n\ndsd distance from source to detector\ndod distance from origin to detector\nsource_offset usually 0\n\nUnits:\n\nd, source_offset, dsd, dod must all have the same units.\n\nBasic methods\n\nangles (na) in degrees\ndims (nb, na)\nones = ones(Float32, nb, na)\nzeros = zeros(Float32, nb, na)\nrays iterator of (r, ϕ) parallel-beam coordinate tuples of size (nb, na)\ndownsample(st, down) reduce sampling by integer factor\noversample(st, over)\nsino_geom_plot! plot system geometry\n\nNon-exported helper functions for developers:\n\n_ds|dr radial sample spacing (NaN for :moj)\n_s (nb) s sample locations\n_w = (nb-1)/2 + offset \"middle\" sample position\n_ar (na) source angles [radians]\n_rfov radial FOV\n_xds (nb) center of detector elements (beta=0)\n_yds (nb) \"\"\n_tau(rg, x, y) projected s/ds for each (x,y) pair (length(x), na)\n_shape(rg, sino [,:]) reshape sino into array (nb,na[,:])\n_unitv(rg [, (ib,ia)]) unit 'vector' with single nonzero element\n\nFor mojette:\n\n_d_ang (na) angle-dependent radial spacing\n\nFor fan beam:\n\n_dso = dsd - dod distance from source to origin (Inf for parallel beam)\n_dfs distance from source to detector focal spot       (0 for 3rd gen CT, Inf for flat detectors)\n_gamma(rg [,s]) (nb) gamma sample values radians, optionally given s values\n_gamma_max = max(|γ|) half of fan angle radians, if offset_s == 0\n\nNotes\n\nUse ct_geom() instead for 3D axial or helical cone-beam CT.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoMoj","page":"Methods","title":"Sinograms.SinoMoj","text":"SinoMoj{Td,To}\n\n2D Mojette sinogram geometry where d means dx (square pixel size)\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoMoj-Tuple{}","page":"Methods","title":"Sinograms.SinoMoj","text":"SinoMoj( ; nb d offset na orbit orbit_start)\n\nConstructor with named keywords. See ?SinoGeom for documentation.\n\njulia> SinoMoj()\nSinoMoj{Float32, Float32} :\n nb::Int64 128\n d::Float32 1.0\n offset::Float32 0.0\n na::Int64 200\n orbit::Float32 180.0\n orbit_start::Float32 0.0\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.SinoPar","page":"Methods","title":"Sinograms.SinoPar","text":"SinoPar{Td,To}\n\n2D parallel-beam sinogram geometry\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.SinoPar-Tuple{}","page":"Methods","title":"Sinograms.SinoPar","text":"SinoPar( ; nb d offset na orbit orbit_start)\n\nConstructor with named keywords. See ?SinoGeom for documentation.\n\njulia> SinoPar()\nSinoPar{Float32, Float32} :\n nb::Int64 128\n d::Float32 1.0\n offset::Float32 0.0\n na::Int64 200\n orbit::Float32 180.0\n orbit_start::Float32 0.0\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.Window","page":"Methods","title":"Sinograms.Window","text":"Window{S,T}\n\nData type for FBP apodizing windows, with given window shape::S and cutoff::T.\n\njulia> Window(Hamming(), 0.8)\nWindow{Hamming, Float64}(Hamming(), 0.8)\n\n\n\n\n\n","category":"type"},{"location":"methods/#Sinograms.WindowVect","page":"Methods","title":"Sinograms.WindowVect","text":"WindowVect{V} <: AbstractWindowShape\n\nA user-specified window vector, constructed via WindowVect(v::V), where v is a AbstractVector. Caution: length(v) must be appropriate for the padded sinogram size.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Sinograms.RayGeom}","page":"Methods","title":"Base.show","text":"show(io::IO, ::MIME\"text/plain\", rg::RayGeom)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._angle_weights-Tuple{AbstractVector{<:Number}}","page":"Methods","title":"Sinograms._angle_weights","text":"_angle_weights(ar::AbstractVector{<:RealU})\n\nAngular weighting to # scale projections by dβ (aka dϕ or da) for Riemann-like integration.\n\ninput\n\nar (na,) angles in radians.\n\noutput\n\nFor now, simply the scalar (ar[begin+1]-ar[begin]) / n180 where n180 is the number of full multiples of 180°. This simplifies to π/na for typical 180° and 360° scans. For a fan-beam short scan (180° + fan angle), it also simplifies to π/na, where the \"excess\" is handled by Parker weighting.\n\nExamples\n\njulia> rg = SinoPar(); Sinograms._angle_weights(Sinograms._ar(rg)), π/rg.na\n(0.015707962f0, 0.015707963267948967)\n\njulia> rg = SinoPar(;orbit=360); Sinograms._angle_weights(Sinograms._ar(rg)), π/rg.na\n(0.015707962f0, 0.015707963267948967)\n\njulia> rg = SinoFanArc(:short); Sinograms._angle_weights(Sinograms._ar(rg)), π/rg.na\n(0.04842342f0, 0.04487989505128276)\n\nFor now, only equally spaced views are supported, but this is where unequal spacing would be handled, and the output would be of size (na,).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._ar-Tuple{Sinograms.RayGeom}","page":"Methods","title":"Sinograms._ar","text":"_ar(rg::RayGeom)\n\nAngles in radians.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._dfs-Union{Tuple{Union{CtFanArc{Td}, SinoFanArc{Td}}}, Tuple{Td}} where Td","page":"Methods","title":"Sinograms._dfs","text":"_dfs(::Union{SinoFan,CtFan}) Distance from detector arc focal spot to source for fan-beam.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._dso-Tuple{Union{CtFan, SinoFan}}","page":"Methods","title":"Sinograms._dso","text":"_dso(rg::Union{SinoFan,CtFan}) = rg.dsd - rg.dod\n\nDistance from source to origin for fan-beam.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._gamma","page":"Methods","title":"Sinograms._gamma","text":"_gamma(rg::RayGeom [, s])\n\nReturn gamma (γ: fan angle) values for fan-beam geometry.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms._orbit_short-Tuple{Sinograms.RayGeom}","page":"Methods","title":"Sinograms._orbit_short","text":"_orbit_short(rg::RayGeom)\n\nMinimum orbit for a fan-beam short scan.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._reale-Tuple{Any}","page":"Methods","title":"Sinograms._reale","text":"_reale(x ; rtol = …)\n\nReturn the real part of x, but warn if the imaginary part is too large. By default this uses a 100× larger rtol than isapprox due to FFT errors.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._rfov-Tuple{Union{CtPar, SinoPar}}","page":"Methods","title":"Sinograms._rfov","text":"_rfov(rg::RayGeom)\n\nRadial FOV.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._shape-Tuple{Sinograms.RayGeom, AbstractArray}","page":"Methods","title":"Sinograms._shape","text":"_shape(rg, x::AbstractArray [, :])\n\nReshape x to dims(rg) or (dims(rg)..., :).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Any}","page":"Methods","title":"Sinograms._show","text":"_show(io::IO, ::MIME\"text/plain\", st::Any)\n\nInformative way to show fields of a struct (composite type).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._tau-Tuple{Sinograms.RayGeom, AbstractArray, AbstractArray}","page":"Methods","title":"Sinograms._tau","text":"_tau(rg::RayGeom, x, y)\n\nProjected s/ds, useful for footprint center and support. Returns Matrix of size length(x) × rg.na.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._unitv","page":"Methods","title":"Sinograms._unitv","text":"_unitv([T=Float32], rg:RayGeom [, pos::Tuple])\n\nProjection views with a single non-zero ray value at position pos (default: middle).\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms._xds-Tuple{Union{CtPar, SinoPar}}","page":"Methods","title":"Sinograms._xds","text":"_xds(rg::RayGeom)\n\nCenter x positions of detectors (for beta = 0), for central row of detector.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms._yds-Union{Tuple{Union{CtPar{Td}, SinoPar{Td}}}, Tuple{Td}} where Td","page":"Methods","title":"Sinograms._yds","text":"_yds(rg::RayGeom)\n\nCenter y positions of detectors (for beta = 0), for central row of detector.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.angles-Tuple{Sinograms.RayGeom}","page":"Methods","title":"Sinograms.angles","text":"angles(rg::RayGeom) =\n\nReturn vector of angles for this ray geometry, in whatever units the user used to specify orbit and orbit_start, typically degrees.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.backproject_bdd-Union{Tuple{T}, Tuple{AbstractMatrix{<:T}, Any}} where T<:Number","page":"Methods","title":"Sinograms.backproject_bdd","text":"backproject_bdd(sinogram::AbstractMatrix{<:T}, geo)\n\nGenerates a reconstructed image using the back projection algorithm, for a sinogram and a tuple of geometry definitions\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.cb_arc_to_par-Union{Tuple{Ts}, Tuple{Ts, Vararg{Number, 4}}} where Ts<:Number","page":"Methods","title":"Sinograms.cb_arc_to_par","text":"u, v, azim, polar = cb_arc_to_par(s, t, β, dso, dod)\n\nConvert from cone-beam arc (3rd gen CT) coordinates to parallel-beam coordinates.\n\nin\n\ns,t detector coordinates\nβ X-ray source angle, measured counter-clockwise from y axis\ndso,dsd distances for the geometry\n\nout\n\nu,v transaxial and axial parallel-beam detector coordinates\nazim ϕ transaxial or azimuthal angle (radians)\npolar θ polar angle (radians)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.cb_flat_to_par-NTuple{5, Number}","page":"Methods","title":"Sinograms.cb_flat_to_par","text":"u, v, azim, polar = cb_flat_to_par(s, t, β, dso, dod)\n\nConvert from cone-beam flat panel coordinages to parallel-beam coordinates.\n\nin\n\ns,t detector coordinates\nβ X-ray source angle, measured counter-clockwise from y axis\ndso,dsd distances for the geometry\n\nout\n\nu,v transaxial and axial parallel-beam detector coordinates\nazim ϕ transaxial or azimuthal angle (radians)\npolar θ polar angle (radians)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.cbct_back-Tuple{AbstractArray{<:Number, 3}, CtFan, ImageGeoms.ImageGeom{3, S, M} where {S<:Tuple{Number, Number, Number}, M<:AbstractArray{Bool, 3}}}","page":"Methods","title":"Sinograms.cbct_back","text":"cbct_back(proj, rg, ig)\n\nCone-beam backprojector for feldkamp.jl\n\nin\n\nproj (ns,nt,na) cone-beam projection views\nrg::CtGeom\nig::ImageGeom\n\nout\n\nimg (nx,ny,nz) back-projection result\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.cbct_back_fan!-Union{Tuple{Toffset}, Tuple{T}, Tuple{Array{T, 3}, AbstractArray{<:Number, 3}, AbstractVector{<:Number}, Number, Number, Number, Number, Toffset, Toffset, Bool, AbstractVector{<:Number}, AbstractVector{<:Number}, AbstractVector{<:Number}, AbstractArray{Bool, 3}}} where {T<:Number, Toffset<:Real}","page":"Methods","title":"Sinograms.cbct_back_fan!","text":"cbct_back_fan!(...)\n\nThis should work even for non-uniformly spaced source angles (for a circular source trajectory).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.downsample-Tuple{CtGeom, Int64}","page":"Methods","title":"Sinograms.downsample","text":"downsample(rg, down::Int)\ndownsample(rg, down::NTuple{3,Int})\n\nDown-sample CT geometry (for testing with small problems).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.downsample-Union{Tuple{G}, Tuple{G, Int64}} where G<:SinoParallel","page":"Methods","title":"Sinograms.downsample","text":"downsample(rg, down)\n\nDown-sample sinogram geometry (for testing with small problems).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp","page":"Methods","title":"Sinograms.fbp","text":"fbp(plan, sino)\n\nFiltered back-projection (FBP) reconstruction.\n\nin\n\nplan::FBPplan\nsino::AbstractArray{<:Number} (nb,na,...) sinogram(s)\n\nout\n\nimage::Matrix{<:Number} (nx,ny,...) reconstructed image(s)\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.fbp!-Tuple{AbstractMatrix{<:Number}, AbstractMatrix{<:Number}}","page":"Methods","title":"Sinograms.fbp!","text":"fbp!(image, sino ; orbit::Real = 180, kwargs...)\n\nFBP reconstruction from a parallel-beam sinogram of size [nr × nϕ]. Writes result into image matrix.\n\nInput\n\nsino::AbstractMatrix\n\nOptions for SinoPar constructor\n\ndr : sinogram radial spacing; default 1\norbit : angular range in degrees; default 180\norbit_start : angular range in degrees; default 0\n\nOptions for ImageGeom\n\ndx, dy, deltas, offset_x, offset_y, offsets\nrmax maximum radius for mask\n\nOptions\n\nkwargs : passed to plan_fbp\n\nOutput\n\nimage::AbstractMatrix is mutated\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp-Union{Tuple{AbstractMatrix{Ts}}, Tuple{Td}, Tuple{Ts}} where {Ts<:Number, Td<:Number}","page":"Methods","title":"Sinograms.fbp","text":"fbp(sino::AbstractMatrix ; kwargs...)\n\nFBP reconstruction from a parallel-beam sinogram of size [nr × nϕ]. Returns an image of size [nx × ny].\n\nOptions\n\nnx : default nr\nny : default nx\nkwargs : passed to fbp!\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back","page":"Methods","title":"Sinograms.fbp_back","text":"img = fbp_back(rg, ig, sino ; ia_skip)\n\n2D pixel-driven backprojection for FBP.\n\nin\n\nrg::SinoGeom\nig::ImageGeom\nsino::AbstractArray{<:Number} sinogram(s) (line integrals), usually ramp filtered\n\noption\n\nia_skip::Int downsample in angle to save time for quick tests (default: 1)\n\nout\n\nimg::Array{<:Number} reconstructed image(s)\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.fbp_back_fan!-Union{Tuple{Toffset}, Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{<:Number}, AbstractVector{<:Real}, AbstractVector{<:Real}, Number, Number, Number, Bool, Number, Toffset, AbstractArray{<:Number}, AbstractArray{<:Number}, AbstractMatrix{Bool}}} where {T<:Number, Toffset<:Real}","page":"Methods","title":"Sinograms.fbp_back_fan!","text":"fbp_back_fan!(image, sino, sinβ, cosβ,\n    dsd, dso, source_offset, is_arc,\n    ds, offset, xc, yc, mask ; ia_skip)\n\nMutating version of pixel-driven back-projection for a grid of (xc,yc) pixel center locations for sinogram sino from a fan-beam geometry. It uses Threads. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nsinβ::Vector{<:Real} (na)\ncosβ::Vector{<:Real} (na)\ndsd,dso,source_offset::RealU geometry\nis_arc::Bool\nds::RealU ray spacing\noffset::Real detector offset (usually 0)\nxc::Vector{<:RealU} (nx) pixel centers\nyc::Vector{<:RealU} (ny) pixel centers\nmask::Matrix{Bool} (nx, ny) which pixels to reconstruct\n\noption\n\nia_skip::Int default 1\n\nout\n\nimage::Matrix (nx, ny) matrix to be mutated\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back_fan-Union{Tuple{Tc}, Tuple{Toffset}, Tuple{Tds}, Tuple{To}, Tuple{Ts}, Tuple{AbstractMatrix{Ts}, AbstractVector{To}, Number, Number, Number, Bool, Tds, Toffset, AbstractArray{Tc}, AbstractArray{Tc}, AbstractMatrix{Bool}}} where {Ts<:Number, To<:Number, Tds<:Number, Toffset<:Real, Tc<:Number}","page":"Methods","title":"Sinograms.fbp_back_fan","text":"fbp_back_fan(sino, betas,\n    dsd, dso, dfs, source_offset, is_arc,\n    ds, offset, xc, yc, mask ; ia_skip, T)\n\nPixel-driven back-projection for a grid of (xc,yc) pixel center locations for sinogram sino from a fan-beam geometry. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nbetas::Vector{<:Real} (na) in radians\ndsd,dso,source_offset::RealU geometry\nis_arc::Bool arc or flat?\nds::RealU ray spacing\noffset::Real detector offset (usually 0)\nxc::Vector{<:RealU} (nx) pixel centers\nyc::Vector{<:RealU} (ny) pixel centers\nmask::Matrix{Bool} (nx, ny) which pixels to reconstruct\n\noption\n\nia_skip::Int default 1\nT::Type{<:Number} usually same as eltype(sino)\n\nout\n\nimage::Matrix (nx, ny)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back_fan_xy-Union{Tuple{Tx}, Tuple{Tb}, Tuple{To}, Tuple{Ts}, Tuple{AbstractMatrix{Ts}, AbstractVector{To}, AbstractVector{To}, Real, Real, Real, Bool, Tb, Tx, Tx}} where {Ts<:Number, To<:Real, Tb<:Real, Tx<:Real}","page":"Methods","title":"Sinograms.fbp_back_fan_xy","text":"fbp_back_fan_xy(sino, sinβ, cosβ,\n    dsd_ds, dso_ds, source_offset_ds, is_arc,\n    wb, x, y ; T)\n\nPixel-driven back-projection for a single (x,y) location for sinogram sino from a fan-beam geometry. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nsinβ::Vector{<:Real} (na)\ncosβ::Vector{<:Real} (na)\ndsd_ds,dso_ds,source_offset_ds::Real geometry, normalized\nwb::Real = (nb+1)/2 + offset where usually offset=0\nx,y::Real pixel center location, normalized by ray spacing\n\noption\n\nT::Type{<:Number} typically same as eltype(sino)\n\nout\n\nReturns a scalar of type T.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back_par!-Union{Tuple{Toffset}, Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{<:Number}, AbstractVector{<:Real}, AbstractVector{<:Real}, Number, Toffset, AbstractArray{<:Number}, AbstractArray{<:Number}, AbstractMatrix{Bool}}} where {T<:Number, Toffset<:Real}","page":"Methods","title":"Sinograms.fbp_back_par!","text":"fbp_back_par!(image, sino, sinϕ, cosϕ,\n    ds, offset, xc, yc, mask ; ia_skip)\n\nMutating version of pixel-driven back-projection for a grid of (xc,yc) pixel center locations for sinogram sino from a parallel-beam geometry. It uses Threads. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nsinϕ::Vector{<:Real} (na)\ncosϕ::Vector{<:Real} (na)\nds::RealU ray spacing\noffset::Real detector offset (usually 0)\nxc::Vector{<:RealU} (nx) pixel centers\nyc::Vector{<:RealU} (ny) pixel centers\nmask::Matrix{Bool} (nx, ny) which pixels to reconstruct\n\noption\n\nia_skip::Int default 1\n\nout\n\nimage::Matrix (nx, ny) matrix to be mutated\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back_par-Union{Tuple{Tc}, Tuple{Toffset}, Tuple{Tds}, Tuple{To}, Tuple{Ts}, Tuple{AbstractMatrix{Ts}, AbstractVector{To}, Tds, Toffset, AbstractArray{Tc}, AbstractArray{Tc}, AbstractMatrix{Bool}}} where {Ts<:Number, To<:Number, Tds<:Number, Toffset<:Real, Tc<:Number}","page":"Methods","title":"Sinograms.fbp_back_par","text":"fbp_back_par(sino, angles,\n    ds, offset, xc, yc, mask ; ia_skip, T)\n\nPixel-driven back-projection for a grid of (xc,yc) pixel center locations for sinogram sino from a parallel-beam geometry. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nangles::Vector{<:Real} (na) in radians\nds::RealU ray spacing\noffset::Real detector offset (usually 0)\nxc::Vector{<:RealU} (nx) pixel centers\nyc::Vector{<:RealU} (ny) pixel centers\nmask::Matrix{Bool} (nx, ny) which pixels to reconstruct\n\noption\n\nia_skip::Int default 1\nT::Type{<:Number} usually same as eltype(sino)\n\nout\n\nimage::Matrix (nx, ny)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_back_par_xy-Union{Tuple{Tx}, Tuple{Tb}, Tuple{To}, Tuple{Ts}, Tuple{AbstractMatrix{Ts}, AbstractVector{To}, AbstractVector{To}, Tb, Tx, Tx}} where {Ts<:Number, To<:Real, Tb<:Real, Tx<:Real}","page":"Methods","title":"Sinograms.fbp_back_par_xy","text":"fbp_back_par_xy(sino, sinϕ, cosϕ,\n    wb, x, y ; T)\n\nPixel-driven back-projection for a single (x,y) location for sinogram sino from a parallel-beam geometry. It assumes the angles are equally spaced over [0,π).\n\nin\n\nsino::Matrix{<:Number} (nb, na) usually ramp-filtered\nsinϕ::Vector{<:Real} (na)\ncosϕ::Vector{<:Real} (na)\nwb::Real = (nb+1)/2 + offset where usually offset=0\nx,y::Real pixel center location, normalized by ray spacing\n\noption\n\nT::Type{<:Number} typically same as eltype(sino)\n\nout\n\nReturns a scalar of type T.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_filter-Union{Tuple{}, Tuple{Sinograms.RayGeom{Td}}, Tuple{Td}} where Td<:Number","page":"Methods","title":"Sinograms.fbp_filter","text":"Hk = fbp_filter(rg::RayGeom ;\n    npad=0, ds::RealU = rg.d, decon1::Bool=true, window=Window())\n\nCompute frequency response of ramp-like filter used for FBP image reconstruction. Supports parallel-beam and fan-beam tomographic geometries in 2D and 3D. This code samples the band-limited ramp to avoid the aliasing that would be caused by sampling the ramp directly in the frequency domain.\n\nin\n\nrg::RayGeom\n\noption\n\nnpad::Int # of padded samples. (default: next power of 2)\nds::Td detector sample spacing (default from st)\ndecon1::Bool deconvolve effect of linear interpolator? (default: true)\nwindow::Window apodizer; default: Window()\n\nout\n\nHk::Vector apodized ramp filter frequency response\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_ramp","page":"Methods","title":"Sinograms.fbp_ramp","text":"h, n = fbp_ramp(rg::SinoGeom, N::Int)\n\n'ramp-like' filters for parallel-beam and fan-beam FBP reconstruction. This sampled band-limited approach avoids the aliasing that would be caused by sampling the ramp directly in the frequency domain.\n\nin\n\nrg::SinoGeom\nN::Int : # of samples (must be even)\n\nout\n\nh::Vector{<:RealU} : samples of band-limited ramp filter\nn::UnitRange{Int64} : -(N÷2):(N÷2-1)\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.fbp_sino_filter-Union{Tuple{Ts}, Tuple{AbstractArray{Ts}, AbstractVector{<:Number}}} where Ts<:Number","page":"Methods","title":"Sinograms.fbp_sino_filter","text":"sino = fbp_sino_filter(sino::Array, filter::Vector ; extra=0)\n\nApply ramp-like filters to sinogram(s) for 2D FBP image reconstruction. Supports both parallel-beam and fan-beam tomographic geometries in 2D and 3D.\n\nin\n\nsino::AbstractArray{<:Number} [nb (L)] sinograms\nfilter::AbstractVector (npad ≥ nb) apodized ramp filter frequency response\n\noption\n\nextra::Int # of extra sinogram radial samples to keep (default: 0)\nnpad::Int # of padded samples. (default: next power of 2)\n\nout\n\nsino::AbstractArray sinogram with filtered rows\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_sino_weight-Tuple{SinoFan}","page":"Methods","title":"Sinograms.fbp_sino_weight","text":"fbp_sino_weight(rg::SinoFan)\n\nReturn 1D sinogram weighting for first step of 2D fan-beam FBP.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fbp_window-Tuple{Window, Int64}","page":"Methods","title":"Sinograms.fbp_window","text":"fbp_window(w::Window, N::Int ; T = Float32)\n\nCreate an apodizing window of length N and fftshift it.\n\njulia> fbp_window(Window(Hamming()), 4)\n4-element Vector{Float32}:\n 1.0\n 0.54\n 0.0\n 0.54\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fdk-Tuple{FDKplan, AbstractArray{<:Number, 3}}","page":"Methods","title":"Sinograms.fdk","text":"image = fdk(plan, proj)\n\nReconstruct 3D image from cone-beam computed tomography (CBCT) data collected with a circular source trajectory via FDK method.\n\nin\n\nplan::FDKplan\nproj (ns,nt,na) projection views\n\nout\n\nimage (nx,ny,nz) reconstructed image\n\nReferences: Feldkamp, Davis, Kress, JOSA-A, 1(6):612-9, June 1984.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.fdk_weight_cyl","page":"Methods","title":"Sinograms.fdk_weight_cyl","text":"fdk_weight_cyl\n\nFDK projection weighting providing \"exact\" CBCT reconstruction for cylindrical-like objects that satisfy f(xyz) = f(xy0) z. The output is a (ns,nt) matrix.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.fft_filter","page":"Methods","title":"Sinograms.fft_filter","text":"fft_filter(data::Array, filter::Vector [, dim])\n\nApply filter to selected dimensions of array data using FFT.\n\nin\n\ndata::AbstractArray{<:Number} (n, (L))\nfilter::AbstractVector (n) apodized ramp filter frequency response\n\noption\n\ndim non-singleton dimensions of filter (typically 1)\n\nout\n\nout::AbstractArray data filtered along dimension dim\n\nIf the input data is real, so will be the output; this assumes filter frequency response has appropriate symmetry.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.footprint_size","page":"Methods","title":"Sinograms.footprint_size","text":"footprint_size(st::Union{SinoGeom,CtGeom}, ig::ImageGeom)\n\nUnitless maximum footprint size (in detector pixels).\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.integrate1D-Tuple{Vector, Vector}","page":"Methods","title":"Sinograms.integrate1D","text":"integrate1D(p_v::Vector, pixelSize)\n\nCalculates the integral image set, for a given column vector and a pixel size\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.map2x-NTuple{4, Any}","page":"Methods","title":"Sinograms.map2x","text":"map2x(x1,y1,x2,y2)\n\nMaps detector or pixel boundaries onto x-axis, for tube and detector rotation angles and detector/pixel boundaries\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.map2y-NTuple{4, Any}","page":"Methods","title":"Sinograms.map2y","text":"map2y(x1,y1,x2,y2)\n\nMaps detector or pixel boundaries onto y-axis, for tube and detector rotation angles and detector/pixel boundaries\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.oversample-Union{Tuple{G}, Tuple{G, Int64}} where G<:CtParallel","page":"Methods","title":"Sinograms.oversample","text":"oversample(rg, over::Int)\n\nOver-sample CT geometry in \"radial\" dimension.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.oversample-Union{Tuple{G}, Tuple{G, Int64}} where G<:SinoParallel","page":"Methods","title":"Sinograms.oversample","text":"oversample(rg, over::Int)\n\nOver-sample sinogram geometry in \"radial\" dimension. For Mojette sampling, it means that d = dx/over.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.parker_weight","page":"Methods","title":"Sinograms.parker_weight","text":"parker_weight(rg::SinoGeom, T = Float32)\n\nCompute Parker weighting for non-360° orbits. See https://doi.org/10.1118/1.595078. Returns Matrix{T} of size:\n\n(1,1) for SinoPar with typical 180 or 360 orbit\n(1,na) for SinoPar with atypical orbit\n(1,1) for SinoFan with typical 360 orbit\n(ns,na) for SinoFan with typical 360 orbit\n\n\n\n\n\n","category":"function"},{"location":"methods/#Sinograms.parker_weight-Tuple{CtFan}","page":"Methods","title":"Sinograms.parker_weight","text":"parker_weight(rg::CtFan; T::Type{<:AbstractFloat} = Float32, kwargs...)\n\nFor 3D case, return Array{T,3} where size is\n\n(1,1,1) typical fan case with 360° orbit\n(ns,1,na) atypical fan case including short scan\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.plan_fbp-Tuple{CtGeom, ImageGeoms.ImageGeom}","page":"Methods","title":"Sinograms.plan_fbp","text":"plan = plan_fbp(rg, ig; window=Window(), ...)\n\nPlan FDK 3D CBCT image reconstruction, with either flat or arc detector.\n\nTo use this method, you first call it with the CT geometry and image geometry. The routine returns the initialized plan. Thereafter, to to perform FDK reconstruction, call fbp with the plan (perhaps numerous times for the same geometry).\n\nin\n\nrg::CtGeom\nig::ImageGeom only reconstruct pixels within ig.mask.\n\noption\n\nwindow::Window e.g., Window(Hamming(), 0.8); default Window()\nnpad::Int # of radial bins after padding; default nextpow(2, rg.ns + 1)\ndecon1::Bool deconvolve interpolator effect? (default true)\n\nout\n\nplan::FDKplan initialized plan\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.plan_fbp-Tuple{SinoGeom, ImageGeoms.ImageGeom}","page":"Methods","title":"Sinograms.plan_fbp","text":"plan = plan_fbp(rg, ig; how=:normal, window=Window())\n\nPlan FBP 2D tomographic image reconstruction for parallel-beam & fan-beam cases, with either flat or arc detector for fan-beam case.\n\nTo use this method, you first call it with the sinogram geometry and image geometry. The routine returns the initialized plan. Thereafter, to to perform FBP reconstruction, call fbp with the plan (perhaps numerous times for the same geometry).\n\nin\n\nrg::SinoGeom\nig::ImageGeom only reconstruct pixels within ig.mask.\n\noption\n\nhow::Symbol how to reconstruct\n:normal default\n:mojette use mojette rebinning and Gtomo2_table\nwindow::Window e.g., Window(Hamming(), 0.8); default Window()\nnpad::Int # of radial bins after padding; default nextpow(2, rg.nb + 1)\ndecon1::Bool deconvolve interpolator effect? (default true)\nT::Type{<:Number} type of sino elements (default Float32)\n\nout\n\nplan::FBPplan initialized plan\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.project_bdd-Union{Tuple{T}, Tuple{AbstractMatrix{<:T}, Any}} where T<:Number","page":"Methods","title":"Sinograms.project_bdd","text":"project_bdd(phantom::AbstractMatrix{<:T}, geo)\n\nGenerates a sinogram using the forward projection algorithm, for a phantom image and a tuple of geometry definitions\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.ramp_arc-Tuple{Int64, Number, Number}","page":"Methods","title":"Sinograms.ramp_arc","text":"(h, n) = ramp_arc(N::Int, ds::RealU, dsd::RealU)\n\nRamp filter samples for arc fan geometry, for n = -(N÷2):(N÷2-1).\n\nN must be even.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.ramp_flat-Tuple{Int64, Number}","page":"Methods","title":"Sinograms.ramp_flat","text":"(h, n) = ramp_flat(N::Int, ds::RealU)\n\nRamp filter samples for flat fan geometry, for n = -(N÷2):(N÷2-1).\n\nN must be even.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.rays-Tuple{CtPar}","page":"Methods","title":"Sinograms.rays","text":"i = rays(rg::CtGeom)\n\nReturn parallel-beam coordinates of all rays for this CT geometry. Return type of i is a ProductIterator that makes tuples of the form (u, v, ϕ, θ). To make projections call p = [fun(c...) for c in i] where fun is radon(...).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.rays-Tuple{SinoPar}","page":"Methods","title":"Sinograms.rays","text":"i = rays(rg::SinoGeom)\n\nRadial r and angular ϕ coordinates (in radians) of all sinogram elements for the given geometry. Return type of i is a ProductIterator that makes tuples of the form (r, ϕ). To make projections call p = [fun(c...) for c in i] where fun is radon(...).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.to_radians-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T<:AbstractFloat","page":"Methods","title":"Sinograms.to_radians","text":"to_radians(angles::AbstractArray{<:AbstractFloat})\n\nWhen Unitful package not loaded, assume angles are in degrees and convert to radians.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Sinograms.zwart_powell-Tuple{Real, Real}","page":"Methods","title":"Sinograms.zwart_powell","text":"output = zwart_powell(r, ϕ)\n\nAnalytic 2D Radon transform value of Zwart-Powell box spline, for radial distance r (normalized by pixel size) and angle ϕ (in radians).\n\n\n\n\n\n","category":"method"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"EditURL = \"../../../lit/examples/05-fan-flat.jl\"","category":"page"},{"location":"generated/examples/05-fan-flat/#05-fan-flat","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"","category":"section"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"This page describes fan-beam tomographic image reconstruction using the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"This page focuses on fan-beam with a \"flat\" detector, i.e., one row of a flat-panel detector as used in many cone-beam CT (CBCT) systems.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"This page comes from a single Julia file: 05-fan-flat.jl.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 05-fan-flat.ipynb, or open it in binder here: 05-fan-flat.ipynb.","category":"page"},{"location":"generated/examples/05-fan-flat/#Setup","page":"Fan-beam tomography: flat detector","title":"Setup","text":"","category":"section"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Packages needed here.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"using Plots: plot, gui\nusing Unitful: cm\nusing Sinograms: SinoFanFlat, rays, plan_fbp, Window, Hamming, fbp, sino_geom_plot!\nusing ImageGeoms: ImageGeom, fovs, MaskCircle\nusing ImagePhantoms: SheppLogan, shepp_logan, radon, phantom\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/05-fan-flat/#Fan-beam-sinogram-of-Shepp-Logan-phantom","page":"Fan-beam tomography: flat detector","title":"Fan-beam sinogram of Shepp-Logan phantom","text":"","category":"section"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"For illustration, we start by synthesizing a fan-beam sinogram of the Shepp-Logan phantom.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Use ImageGeom to define the image geometry.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"ig = ImageGeom(MaskCircle(); dims=(128,126), deltas = (0.2cm,0.2cm) )","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Use SinoFanFlat to define the sinogram geometry.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"rg = SinoFanFlat( ; nb = 130, d = 0.3cm, na = 100, dsd = 50cm, dod = 14cm)","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Examine the geometry to verify the FOV:","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"jim(axes(ig), ig.mask; prompt=false)\nsino_geom_plot!(rg, ig)","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"prompt()","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Ellipse parameters for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"μ = 0.1 / cm # typical linear attenuation coefficient\nob = shepp_logan(SheppLogan(); fovs = fovs(ig), u = (1, 1, μ))","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Arc fan-beam sinogram for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"sino = radon(rays(rg), ob)\njim(axes(rg), sino; title=\"Shepp-Logan sinogram\", xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/05-fan-flat/#Image-reconstruction-via-FBP","page":"Fan-beam tomography: flat detector","title":"Image reconstruction via FBP","text":"","category":"section"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"Here we start with a \"plan\", which would save work if we were reconstructing many images. For illustration we include Hamming window.","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"plan = plan_fbp(rg, ig; window = Window(Hamming(), 1.0))\nfbp_image = fbp(plan, sino)","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"A narrow color window is needed to see the soft tissue structures:","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"clim = (0.9, 1.1) .* μ\njim(axes(ig), fbp_image, \"FBP image for flat case\"; clim)","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"For comparison, here is the ideal phantom image","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"true_image = phantom(axes(ig)..., ob, 2)\njim(axes(ig)..., true_image, \"True phantom image\"; clim)","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"","category":"page"},{"location":"generated/examples/05-fan-flat/","page":"Fan-beam tomography: flat detector","title":"Fan-beam tomography: flat detector","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"EditURL = \"../../../lit/examples/04-fan-arc.jl\"","category":"page"},{"location":"generated/examples/04-fan-arc/#04-fan-arc","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"","category":"section"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"This page describes fan-beam tomographic image reconstruction using the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"This page focuses on fan-beam with an \"arc\" detector, i.e., 3rd-generation CT systems where the detector is an arc having a focal point at the X-ray source. This geometry is popular in part because it facilitates anti-scatter grids.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"This page comes from a single Julia file: 04-fan-arc.jl.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 04-fan-arc.ipynb, or open it in binder here: 04-fan-arc.ipynb.","category":"page"},{"location":"generated/examples/04-fan-arc/#Setup","page":"Fan-beam tomography: arc detector","title":"Setup","text":"","category":"section"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Packages needed here.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"using Plots: plot, gui\nusing Unitful: mm\nusing Sinograms: SinoFanArc, rays, plan_fbp, fbp, sino_geom_plot!\nusing ImageGeoms: ImageGeom, fovs, MaskCircle\nusing ImagePhantoms: SheppLogan, shepp_logan, radon, phantom\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/04-fan-arc/#Fan-beam-sinogram-of-Shepp-Logan-phantom","page":"Fan-beam tomography: arc detector","title":"Fan-beam sinogram of Shepp-Logan phantom","text":"","category":"section"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"For illustration, we start by synthesizing a fan-beam sinogram of the Shepp-Logan phantom.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Use ImageGeom to define the image geometry.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"ig = ImageGeom(MaskCircle(); dims=(128,126), deltas = (2mm,2mm) )","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Use SinoFanArc to define the sinogram geometry.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"rg = SinoFanArc( ; nb = 130, d = 3.2mm, na = 100, dsd = 400mm, dod = 140mm)","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Examine the geometry to verify the FOV:","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"jim(axes(ig), ig.mask; prompt=false)\nsino_geom_plot!(rg, ig)","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"prompt()","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Ellipse parameters for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"μ = 0.01 / mm # typical linear attenuation coefficient\nob = shepp_logan(SheppLogan(); fovs = fovs(ig), u = (1, 1, μ))","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Arc fan-beam sinogram for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"sino = radon(rays(rg), ob)\njim(axes(rg), sino; title=\"Shepp-Logan sinogram\", xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/04-fan-arc/#Image-reconstruction-via-FBP","page":"Fan-beam tomography: arc detector","title":"Image reconstruction via FBP","text":"","category":"section"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"Here we start with a \"plan\", which would save work if we were reconstructing many images.","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"plan = plan_fbp(rg, ig)\nfbp_image = fbp(plan, sino)","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"A narrow color window is needed to see the soft tissue structures:","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"clim = (0.9, 1.1) .* μ\njim(axes(ig), fbp_image, \"FBP image for arc case\"; clim)","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"For comparison, here is the ideal phantom image","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"true_image = phantom(axes(ig)..., ob, 2)\njim(axes(ig)..., true_image, \"True phantom image\"; clim)","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"","category":"page"},{"location":"generated/examples/04-fan-arc/","page":"Fan-beam tomography: arc detector","title":"Fan-beam tomography: arc detector","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Sinograms","category":"page"},{"location":"#Sinograms.jl-Documentation","page":"Home","title":"Sinograms.jl Documentation","text":"","category":"section"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sinograms.jl is a Julia language package with tools for tomographic image reconstruction, including","category":"page"},{"location":"","page":"Home","title":"Home","text":"describing ray geometries (parallel beam, fan beam, etc.) ✅\nperforming filtered back-projection (FBP) image reconstruction ✅\nsystem models for iterative reconstruction (WIP)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Michigan Image Reconstruction Toolbox (MIRT)\nJuliaImageRecon","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"EditURL = \"../../../lit/examples/01-tomography.jl\"","category":"page"},{"location":"generated/examples/01-tomography/#01-tomography","page":"Tomography overview","title":"Tomography overview","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"This page gives an overview of the Julia package Sinograms.jl.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"This page comes from a single Julia file: 01-tomography.jl.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 01-tomography.ipynb, or open it in binder here: 01-tomography.ipynb.","category":"page"},{"location":"generated/examples/01-tomography/#Setup","page":"Tomography overview","title":"Setup","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Packages needed here.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"using Sinograms: fbp\nusing MIRTjim: jim, prompt\nusing InteractiveUtils: versioninfo","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/01-tomography/#Tomography","page":"Tomography overview","title":"Tomography","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Tomography is the process of imaging cross sections of an object without actually slicing the object. There are many forms of tomography; the description here focuses on X-ray computed tomography (CT scans). (See SPECTrecon.jl for a Julia package related to SPECT imaging.)","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"In an X-ray CT imaging system, X-rays emitted from an X-ray source are transmitted through an object (e.g., a patient in medical CT) towards a detector array. The source and detector rotate rapidly around the object. The signal intensities recorded by the detector are related to the sizes and densities of the object materials between the source and each detector element.","category":"page"},{"location":"generated/examples/01-tomography/#Radon-transform","page":"Tomography overview","title":"Radon transform","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The mathematical foundation for 2D X-ray CT imaging is the Radon transform, an integral transform that maps a 2D function f(xy) into the collection of line integrals through that function. Here we describe each line by its angle phi measured counter-clockwise from the y axis, and by the radial distance r of the line from the origin. The collection of integrals is called a sinogram.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Mathematically, the Radon transform p(rphi) of f(xy) is defined by","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"p(rphi) = int_-infty^infty\nf(r cos phi - l sin phi\nr sin phi + l cos phi)  mathrmd l","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The Radon transform of the object that is 1 inside the unit disk and 0 elsewhere is given by","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"p_1(rphi) = 2 sqrt1 - r^2  mathrm for   r  1","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"By the Radon transform's translation and scaling properties, the Radon transform of a disk of radius r_0 centered at (x_0y_0) is given by","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"p(rphi) = r_0  p_1\nleft( fracr - (x_0 cos phi + y_0 sin phi)r_0 ϕ right)","category":"page"},{"location":"generated/examples/01-tomography/#Sinogram-example","page":"Tomography overview","title":"Sinogram example","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Here is a display of that Radon transform for a disk of radius 3 centered at coordinate (51). Note that maximum value is approximately 6, the length of the longest chord through a disk of radius 3.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"nr = 128\ndr = 20 / nr\nr = ((-(nr-1)/2):((nr-1)/2)) * dr # radial sample locations\nna = 130\nϕ = (0:(na-1))/na * π # angular samples\nproj1 = r -> abs(r) < 1 ? 2 * sqrt(1 - r^2) : 0.\nproj2 = (r, ϕ, x, y, r0) -> r0 * proj1(r/r0 - (x * cos(ϕ) + y * sin(ϕ))/r0)\nsino = proj2.(r, ϕ', 5, 1, 3)\njimsino = (sino, title) -> jim(\n    r, ϕ, sino; title, aspect_ratio=:none,\n    xlabel = \"r\", ylabel = \"ϕ\", ylims=(0,π), yticks=([0, π], [\"0\", \"π\"]),\n    yflip=false, xticks = [-10, 0, 2, 5, 8, 10],\n    clim = (0, 6),\n)\njimsino(sino, \"Sinogram for one disk\")","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"As this figure illustrates, the Radon transform of a unit disk has a somewhat sinusoidal shape. Indeed every point in the (xy) plane traces out a distinct sinusoid in the sinogram.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The mapping from the object f(xy) to data like the sinogram p(rphi) is called the \"forward problem.\"","category":"page"},{"location":"generated/examples/01-tomography/#Image-reconstruction","page":"Tomography overview","title":"Image reconstruction","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Image reconstruction is the process of solving the inverse problem of recovering an estimate hatf(xy) of the object f(xy) from a measured sinogram, i.e., from (usually noisy) samples of p(rphi).","category":"page"},{"location":"generated/examples/01-tomography/#FBP","page":"Tomography overview","title":"FBP","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"A simple image reconstruction method is called the \"filtered back-projection\" (FBP) approach. It works by filtering each row of the sinogram with a filter, called the ramp filter, whose frequency response is roughly nu, where nu is the spatial frequency variable (units cycles / m), followed by a back-projection step that is the adjoint of the Radon transform.","category":"page"},{"location":"generated/examples/01-tomography/#FBP-example","page":"Tomography overview","title":"FBP example","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Here is an illustration of using the fbp method in this package to perform image reconstruction from the preceding sinogram.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"image = fbp(sino; dr)\n(nx,ny) = size(image)\ndx = dr # default\nx = ((-(nx-1)/2):((nx-1)/2)) * dr\ny = x\njim(x, y, image, \"FBP image\",\n    xtick=[-10, 0, 2, 5, 8, 10],\n    ytick=[-10, 0, -2, 1, 4, 10],\n)","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The FBP reconstructed image looks pretty similar to a disk of radius 3 centered at (51) as expected. However, there are quite a few ripples; these are aliasing artifacts due to the finite sampling in r and phi.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"This is example is what is called 2D parallel-beam tomography, because for the angles phi are equally spaced and for each angle the radial samples r are also equally spaced. This package includes FBP reconstruction methods for several other sinogram geometries, including the well-known fan beam geometries and the specialized Mojette geometry.","category":"page"},{"location":"generated/examples/01-tomography/#Noise-effects-on-FBP","page":"Tomography overview","title":"Noise effects on FBP","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Simulating the effects of measurement noise in sinogram leads to even worse FBP results.","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"First note that a practical imaging system has a finite field of view (FOV):","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"rmax = maximum(r)\nfovmask = @. sqrt(abs2(x) + abs2(y)') ≤ rmax\njim(x, y, fovmask, \"FOV mask\")","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Add noise to the original sinogram:","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"noisy_sinogram = sino + 0.1 * randn(size(sino))\njimsino(noisy_sinogram, \"Noisy sinogram\")","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"Apply FBP to the noisy sinogram:","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"noisy_fbp_image = fbp(noisy_sinogram; dr)\nnoisy_fbp_image .*= fovmask # apply FOV mask\njim(x, y, noisy_fbp_image, \"Noisy FBP image\"; clim=(0,1))","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"The methods in this package (WIP) and related methods in the JuliaImageRecon suite are designed to provide better reconstructions than the simple FBP method. In particular, model-based image reconstruction (MBIR) methods and methods that use suitable machine-learning approaches can improve image quality significantly. See this 2020 survey paper.","category":"page"},{"location":"generated/examples/01-tomography/#Reproducibility","page":"Tomography overview","title":"Reproducibility","text":"","category":"section"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"This page was generated with the following version of Julia:","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"using InteractiveUtils: versioninfo\nio = IOBuffer(); versioninfo(io); split(String(take!(io)), '\\n')","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"And with the following package versions","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"import Pkg; Pkg.status()","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"","category":"page"},{"location":"generated/examples/01-tomography/","page":"Tomography overview","title":"Tomography overview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"EditURL = \"../../../lit/examples/06-fan-short.jl\"","category":"page"},{"location":"generated/examples/06-fan-short/#06-fan-short","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"","category":"section"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"This page describes fan-beam tomographic image reconstruction using the Julia package Sinograms.jl for a \"short\" scan where the rotation (orbit) is 180° plus the fan angle. This case requires Parker weighting.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"This page focuses on fan-beam with an \"arc\" detector, i.e., 3rd-generation CT systems where the detector is an arc having a focal point at the X-ray source. This geometry is popular in part because it facilitates anti-scatter grids.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"This page comes from a single Julia file: 06-fan-short.jl.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"You can access the source code for such Julia documentation using the 'Edit on GitHub' link in the top right. You can view the corresponding notebook in nbviewer here: 06-fan-short.ipynb, or open it in binder here: 06-fan-short.ipynb.","category":"page"},{"location":"generated/examples/06-fan-short/#Setup","page":"Fan-beam tomography: short scan","title":"Setup","text":"","category":"section"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Packages needed here.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"using Plots: plot, gui\nusing Unitful: mm\nusing Sinograms: SinoFanArc, rays, plan_fbp, fbp, sino_geom_plot!\nusing ImageGeoms: ImageGeom, fovs, MaskCircle\nusing ImagePhantoms: SheppLogan, shepp_logan, radon, phantom\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"The following line is helpful when running this file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/06-fan-short/#Fan-beam-sinogram-of-Shepp-Logan-phantom","page":"Fan-beam tomography: short scan","title":"Fan-beam sinogram of Shepp-Logan phantom","text":"","category":"section"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"For illustration, we start by synthesizing a fan-beam sinogram of the Shepp-Logan phantom.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"For completeness, we use units (from Unitful), but units are optional.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Use ImageGeom to define the image geometry.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"ig = ImageGeom(MaskCircle(); dims=(128,126), deltas = (2mm,2mm) )","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Use SinoFanArc to define the sinogram geometry, with the :short option for orbit to make a short scan. Note that even though we specify na = 100 we end up with na = 67 views because of the :short option.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"rg = SinoFanArc( :short, ;\n    nb = 130, d = 3.2mm, na = 100, dsd = 400mm, dod = 140mm,\n)","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Examine the geometry to verify the FOV. The na=67 blue dots show the :short scan.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"jim(axes(ig), ig.mask; prompt=false)\nsino_geom_plot!(rg, ig)","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"prompt()","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Ellipse parameters for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"μ = 0.01 / mm # typical linear attenuation coefficient\nob = shepp_logan(SheppLogan(); fovs = fovs(ig), u = (1, 1, μ))","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Short arc fan-beam sinogram for Shepp-Logan phantom:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"sino = radon(rays(rg), ob)\njim(axes(rg), sino; title=\"Shepp-Logan 'short' sinogram\",\n    xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/06-fan-short/#Image-reconstruction-via-FBP","page":"Fan-beam tomography: short scan","title":"Image reconstruction via FBP","text":"","category":"section"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Here we start with a \"plan\", which would save work if we were reconstructing many images.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"plan = plan_fbp(rg, ig)","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Examine Parker weights:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"jim(axes(rg), plan.view_weight; title = \"Parker weights\",\n    xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Finally perform FBP:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"fbp_image = fbp(plan, sino);\nnothing #hide","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"A narrow color window is needed to see the soft tissue structures:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"clim = (0.9, 1.1) .* μ\njim(axes(ig), fbp_image, \"FBP image for 'short' arc case\"; clim)","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"For comparison, here is the ideal phantom image:","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"true_image = phantom(axes(ig)..., ob, 2)\njim(axes(ig)..., true_image, \"True phantom image\"; clim)","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"Here is the difference image. Better sampling would reduce the errors.","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"jim(axes(ig)..., fbp_image - true_image, \"Error image\")","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"","category":"page"},{"location":"generated/examples/06-fan-short/","page":"Fan-beam tomography: short scan","title":"Fan-beam tomography: short scan","text":"This page was generated using Literate.jl.","category":"page"}]
}
